=> Initial setup: npx create-next-app appName
=> To run on localhost: npm run dev

=> Next.js is used for server side rendering

=> Next. js is a pre-rendered React app in the client-side that users can view and interact with 
   and can be considered as front-end. At the same time, it also does server-side rendering and 
   API routes which can perform server-side code and access data in the database and can be considered as back-end.

=> pages => index.js will be rendered first

=> Pages and routes:
    - There is prebuilt folder named pages where you can define your pages like about, footer, etc.
    - In pages you can create another folder and can create a component within that folder.
    - When you create a page next will automatically create a route for that page.
    - eg:  - if pagename is home it will automatically create a route called /home
           - if you have a folder inside pages then it will create route according to that.
                1. suppose pages => your_folder_name => index.js then if you visit /your_folder_name then it will display content of index.js
                2. suppose pages => your_folder_name => index.js and test.js then if you visit /your_folder_name then it will display content of index.js
                   and if you visit /your_folder_name/test then it will display content of test.js.

=> If you want to create resuable components like footer or navbar then you can create those by creating a folder called components (or anything you like) 
   under main project folder and then creating components in that folder like Footer.js ot Navbar.js and then import in main index.js file.

=> link component: is used to link elements like in navbar. (replacing anchor tag)
                   In HTML we add href to anchor tag but in next we wraap anchor tab in Link tag and add href to Link.  

=> In next if we navigate to certain page for first time we get served by javascript bundle of that perticular page.
   but if we visit that page again then next will not serve javascript bundle again as we visited the page earlier also.
   And if we visit another page it will serve us with the javascript bundle of that page.
   In short eacg page has its own javascript bundle.
   too check => inspect => networks.

=> Layout component: If we want some component of each and every page like nav ot footer then we can create a layout component
   and wrap content of app.js inside Layout (in App.js file) and will include App.js file's content into footer by accessing a prop
   called children which will render all the content.

=> styles cann be declare by creating folder called styles which will be automatically created by next.js and creating stylesheet inside folder
   globally for all pages for for particular page.
=> global.css is used to style globally. Whatever style you declare here will be set to all pages if that classname or tag present in those pages.
=> filename.module.css is used to style particular page.
=> If you are creating stylesheet for a particular page (particularPage.module.css) then you have to import it in that page as styles
   and you can add styles to tag by using styles.anyName and declaring that anyName in that stylesheet (.anyName{styles here}).

=> Custom 404 page:
   - Create a page named 404.js inside folder pages.
   - It will automatically create a route i.e. 404 (no need to specify anywhere)
   - If user click on link which is broken then this page will show up.
   - If you don't create a custom 404 page then next will show a default 404 page.

=> Redirecting users:
   - Suppose you want to redirect user without cliking anything to a certain page like when user submits form after success it will redirect user to 
   home page.
   - For this you can use useEffect hook which will be called when component mounts.
   - For redirecting you need to use useRouter() [from next/router] and give a path like:
      - You can initialize it first like const router = useRouter()
      1] Then you can use router.go(1) it will redirect user to next page
      2] Then you can use router.go(-1) it will redirect user to previous page
      3] If you want to specify a path then you can use router.push('/') : Home path
      4] If you want to specify a path then you can use router.push('/specific_file') : specific_file path

=> Using images and metadata:
   - You can all your images inside filder public
   - you can use your images anywhere in pages using <img src="/imageName" /> (Here no need to specify path just add imagename after /)
   - But next.js provides us Image tab which we can use by importing Image from next/image and then it will automatically make that image responsive based
     on height and width set by us. [note: it is important to set height and width if you are using Image tag instead if img tag]
   - Another main point of using Image tab instead of img is that it will not load image untill and unless we scroll to the particular position of image which
     helps to optimize performace.
   - Metadata: Sometimes we need to set different wesite title for different pages instead of URL.
               We can use Head tag to do this.
               Inside Head you need to set title of that page and  if you want to modify metadata you can use tag <meta name="AnyName" content="anything" />
               Syntax: 
                  <Head>
                     <title>
                        Your title
                     </title>
                     <meta name="Home" content="Listly" />
                  </Head>

=> Fetching data:
   - getStaticProps never runs in browser it will only built time.
   - In return statement we pass value that we want to access.
   - getStaticProps runs before component renders, fetches the data it will wait for data and once we have a data it pumps that data in main return function.
   - we declare getstaticProps => inside we fetch api => convert it into json => and return props with object => access that object in main function as prop 
     => maps data => display what we want.

=> Dynamic routes:
   - If you want to set dynamic routes to your data like if you want when user click on name it will direct him to that user's id then you can create a file 
     inside your main data file (here lists is main and inside that we have users and their ids) and set filename tcovered with [] like [filename] so that next.js
     will know that this is changable and direct user to particular page.
   - Then wrap content of clickable file inside Link tag and give href to it for particular id.

=> getStaticPaths 
   - run at built time.
   - helps to build route and html page for particular id.
   - we set it to async coz we have to fetch all data so we get all ids and we can return those ids to next so based on that next can generate routes and pages.
   - next will check getStaticPaths and will check how many pages should be there based on params set by us.

=> Fetching single item:
   - It will fetch data for single item by creating number of paths same as number of ids or data objects.
   - If you run "npm run build" command in terminal then a folder named server will get created in .next folder and there inside pages folder you can see number of pages generated
     and inside lists page you can see various html pages created by next by using path. This number is equal to number of objects in api. 